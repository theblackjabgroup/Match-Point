<section class="video-section">
  <div class="video-container container">
    <button id="play-pause-btn" class="play-pause-btn">
      <i class="fas fa-pause"></i> <!-- Icon instead of text -->
    </button>
    <video id="autoplay-video" class="cards video" autoplay muted loop>
      {% comment %} <source src="{{ 'https://dhygzobemt712.cloudfront.net/Web/home/2024-hero_experiment-august/hero_video-optimized.webm' }}" type="video/mp4">
      Your browser does not support the video tag. {% endcomment %}
      {% if section.settings.video_file != blank %}
        <source src="{{ section.settings.video_file | video_url }}" type="video/mp4">
      {% elsif section.settings.video_url != blank %}
        <source src="{{ section.settings.video_url }}" type="video/mp4">
      {% else %}
        <p>Your browser does not support the video tag.</p>
      {% endif %}
    </video>
  </div>
</section>

<!-- Add FontAwesome link for icons -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">


<style>
.container {
  perspective: 1000px; /* For the 3D effect */
  max-width: 1200px;
  margin: 0 auto;
  position: relative;
}

.cards {
  width: 100%;  /* Video now fits full width */
  height: 100%; /* Video now fits full height */
  background-color: white;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
  border-radius: 10px;
  transition: transform 0.1s ease-out;
  transform-style: preserve-3d;
  transform-origin: center;
  will-change: transform;
}

.play-pause-btn {
  position: absolute;
  top: 20px;
  right: 20px; /* Moved button to the right */
  z-index: 10;
  background-color: rgba(0, 0, 0, 0.7);
  color: white;
  border: none;
  padding: 10px;
  border-radius: 50%; /* Circular button */
  cursor: pointer;
}

.play-pause-btn:hover {
  background-color: rgba(0, 0, 0, 0.9);
}

.play-pause-btn i {
  font-size: 16px;
  color: white;
}

.cards video {
  width: 100%;
  height: 100%; /* Video fills container */
  border-radius: 10px;
  object-fit: cover; /* Ensures the video fits well */
}

</style>
<script>
const video = document.getElementById('autoplay-video');
const playPauseBtn = document.getElementById('play-pause-btn');
const icon = playPauseBtn.querySelector('i');

// Play/Pause button functionality
playPauseBtn.addEventListener('click', () => {
  if (video.paused) {
    video.play();
    icon.classList.remove('fa-play');
    icon.classList.add('fa-pause');
  } else {
    video.pause();
    icon.classList.remove('fa-pause');
    icon.classList.add('fa-play');
  }
});

// Get the size of the card
const card = document.querySelector('.cards');
const container = document.querySelector('.container');
let lastXRotate = 0; // Variable to store the last X-axis rotation

// Add a scroll event listener
window.addEventListener('scroll', () => {
  const rect = container.getBoundingClientRect();

  // Calculate the percentage of the card in the viewport
  const scrollPos = window.scrollY;
  const containerTop = container.offsetTop;
  const containerHeight = container.offsetHeight;

  // If the container is visible in the viewport, adjust the card rotation
  if (scrollPos >= containerTop && scrollPos <= containerTop + containerHeight) {
    // Calculate how far you've scrolled within the container's height
    const yPos = (scrollPos - containerTop) / containerHeight;

    // Set the rotation angle for the X-axis (based on scroll)
    const xRotate = (yPos - 0.5) * -40; // Adjust tilt intensity here
    lastXRotate = xRotate;

    // Apply the X-axis rotation to the card
    card.style.transform = `rotateX(${xRotate}deg)`;
  }

  // If the card is out of view, reset the rotation
  if (rect.top > window.innerHeight || rect.bottom < 0) {
    // Reset to original position when the card is not visible
    card.style.transform = 'rotateX(0deg)';
    lastXRotate = 0; // Reset the last rotation to default
  }
});


</script>


{% schema  %}
    {
      "name": "video-section",
      "settings": [
        {
          "type": "url",
          "id": "video_url",
          "label": "Video URL"
        },
        {
          "type": "video",
          "id": "video_file",
          "label": "Upload Video File"
        }
      ],
      "presets": [{
        "name": "Default video-section"
      }],
      "class": "video-section"
    } 
{% endschema %} 
